buildscript {
    repositories {
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'com.github.sherter.googlejavaformatgradleplugin:google-java-format-gradle-plugin:0.9-SNAPSHOT'
    }
}

subprojects {
    group 'distroboy'
    version "${version_string}"

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'com.github.sherter.google-java-format'

    compileJava.dependsOn verifyGoogleJavaFormat

    repositories {
        mavenCentral()
    }

    jar {
        manifest {
            attributes (
                    'Implementation-Title': "distroboy-${project.name}",
                    'Implementation-Version': "${version_string}",
                    'DistroBoy-CommitSHA': "${commit_sha}"
            )
        }
    }

    project.ext.executableJar = { String mainClass ->
        jar {
            manifest {
                attributes(
                        'Class-Path': configurations.runtimeClasspath.collect { 'dependencies/' + it.getName() }.join(' '),
                        'Main-Class': mainClass
                )
            }
        }
    }

    project.ext.publishToGitHubPackages = {
        apply plugin: 'maven-publish'
        publishing {
            repositories {
                maven {
                    name = "GitHubPackages"
                    url = "https://maven.pkg.github.com/MarkOSIndustries/distroboy"
                    credentials {
                        username = System.getenv("GITHUB_ACTOR")
                        password = System.getenv("GITHUB_TOKEN")
                    }
                }
            }
        }
    }

    project.ext.distributeWithDependencies = {
        apply plugin: 'distribution'
        distributions {
            main {
                distributionBaseName = "distroboy-${project.name}"
                contents {
                    into("") {
                        from jar.archiveFile
                    }
                    into("dependencies") {
                        from configurations.runtimeClasspath
                    }
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }

    googleJavaFormat {
        toolVersion '1.9'
    }

    test {
        useJUnitPlatform()
    }
}
