buildscript {
    repositories {
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'com.github.sherter.googlejavaformatgradleplugin:google-java-format-gradle-plugin:0.9-SNAPSHOT'
    }
}

subprojects {
    group 'com.markosindustries.distroboy'
    version "${version_string}"

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'com.github.sherter.google-java-format'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    compileJava.dependsOn verifyGoogleJavaFormat

    repositories {
        mavenCentral()
    }

    jar {
        manifest {
            attributes (
                    'Implementation-Title': "${project.group}.${project.name}",
                    'Implementation-Version': "${version_string}",
                    'DistroBoy-CommitSHA': "${commit_sha}"
            )
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        options.addBooleanOption('html5', true)
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = "${project.name}"
                description = "${project.description}"
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
                pom {
                    url = 'https://github.com/MarkOSIndustries/distroboy'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://github.com/MarkOSIndustries/distroboy/blob/master/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'markosindustries'
                            name = 'Mark Green'
                            email = 'markosindustries@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/MarkOSIndustries/distroboy.git'
                        url = 'https://github.com/MarkOSIndustries/distroboy'
                    }
                }
            }
        }
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/MarkOSIndustries/distroboy"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
            maven {
                name = "OSSRH"
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = System.getenv("OSSRH_USERNAME")
                    password = System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    project.ext.executableJar = { String mainClass ->
        jar {
            manifest {
                attributes(
                        'Class-Path': configurations.runtimeClasspath.collect { 'dependencies/' + it.getName() }.join(' '),
                        'Main-Class': mainClass
                )
            }
        }
    }

    project.ext.distributeWithDependencies = {
        apply plugin: 'distribution'
        distributions {
            main {
                distributionBaseName = "distroboy-${project.name}"
                contents {
                    into("") {
                        from jar.archiveFile
                    }
                    into("dependencies") {
                        from configurations.runtimeClasspath
                    }
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }

    googleJavaFormat {
        toolVersion '1.9'
    }

    test {
        useJUnitPlatform()
    }
}
